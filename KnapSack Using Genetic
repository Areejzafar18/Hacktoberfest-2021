/*
            Project Report:
 Knapsack Problem using Genetic Algorithm 
 
 */

using System;
using System.Linq;

namespace KnapsackGeneticAlgo
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Enter Maximum Weight Capacity of Knapsack in Kg : ");
            double WeightCapacity = Convert.ToDouble(Console.ReadLine()); //Maximum capacity of Knapsack
           
            Console.Write("\n\nEnter No. of Items : ");
            
            int noOfitems = Int32.Parse(Console.ReadLine());
           
            string[] items = new string[noOfitems];
            double[] weights = new double[noOfitems];
            double[] values = new double[noOfitems];

            //Take input from user to enter items
            Console.WriteLine();

            for (int i = 0; i < noOfitems; i++)
            {
                Console.Write("Enter Name of item {0} : ", i+1);
                items[i] = Convert.ToString(Console.ReadLine());
            }
            
            Console.WriteLine();

            //Take input from user to enter weights of items

            for (int i = 0; i < noOfitems; i++)
            {
                Console.Write("Enter Weight of item {0} : ",items[i]);
                weights[i] = Convert.ToDouble(Console.ReadLine());
            }

            Console.WriteLine();

            //Take input from user to enter values of items

            for (int i = 0; i < noOfitems; i++)
            {
                Console.Write("Enter Value of item {0} : ", items[i]);
                values[i] = Convert.ToDouble(Console.ReadLine());
            }

            Console.Clear();

            //Display the user inputs in the form of table

            Console.WriteLine("This is what you have entered...\n");

            Console.WriteLine("\nITEMS\t\tWEIGHTS\t\tVALUES");
            Console.WriteLine("________________________________________________________\n");
            for(int i = 0; i < noOfitems; i++)
            {
                Console.Write("{0}\t\t{1}\t\t{2}\n", items[i], weights[i], values[i] );
            }

            //Now solve this KnapSack problem using Genetic Algorithm


            //Step 1: Initialize random initial population 
            //Chromosome Encoding

            Random rand = new Random();
            int populationSize = new int();
            
            Console.Write("\nEnter Population Size: ");
            populationSize = Convert.ToInt32(Console.ReadLine());

            bool[,] population = new bool[populationSize, noOfitems];

            for (int i = 0; i < populationSize; i++)
            {
                for (int j = 0; j < noOfitems; j++)
                { 
                    if(rand.NextDouble() > 0.5)
                    {
                        population[i, j] = true;
                    }
                    else
                    {
                        population[i, j] = false;
                    }
                }
            }

            //Display the Initial Population

            Console.WriteLine();
            Console.WriteLine("\t--------------Genration : 1-----------------\n\n");
            for (int i = 0; i < populationSize; i++)
            {
                Console.Write("Chromosome {0} : ", i+1);

                for (int j = 0; j < noOfitems; j++)
                {
                    Console.Write("\t {0}", Convert.ToInt32(population[i,j]));
                }

                Console.WriteLine();
            }

            //Step 2: Evaluate Fitness Function
            double[] fitnessVal = new double[populationSize];  //fitness value of knapsack
            double[] sumWeights = new double[populationSize];  //Sum of Weights

            for(int i = 0; i < populationSize; i++)
            {
                fitnessVal[i] = 0;   
                sumWeights[i] = 0;
            }

            for(int i = 0; i < populationSize; i++)
            {
                for(int j = 0; j < noOfitems; j++)
                {
                    if(population[i,j])
                    {
                        fitnessVal[i] = fitnessVal[i] + values[j];
                        sumWeights[i] = sumWeights[i] + weights[j];
                    }
                }
                
                Console.Write("\nFitness value of Chromosome {0} : {1}", i+1, fitnessVal[i]);
                Console.Write("\nWeight of Knapsack for Chromosome {0} : {1}", i+1, sumWeights[i]);
            }

            //Display the acceptable and discardable Chromosomes by comparing their weights with capacity  weight 

           // double[] accepted = new double[populationSize];
           // double[] discarded = new double[populationSize];

            for (int i = 0; i < populationSize; i++)
            {
                if (sumWeights[i] >= WeightCapacity || sumWeights[i] == 0)
                {
                    fitnessVal[i] = 0;
                    Console.Write("\n\nChromosome {0} is discarded",i+1);
                }
                else
                {
                    //accepted[i] = fitnessVal[i];
                    Console.Write("\n\nChromosome {0} is accepted", i+1);
                }
            }

            //Step 3: Selection

            //Find the best/largest fitness value
            double bestFitnessVal;
            int bestFitnessIndex;
            bestFitnessVal = fitnessVal.Max();
            bestFitnessIndex = fitnessVal.ToList().IndexOf(bestFitnessVal);

            Console.Write("\n\nLargest Fitness Value is of Chromosome {0} : {1}", bestFitnessIndex+1,bestFitnessVal);

            //Find Total Fitness Value
            double totalFitness = 0;
            for(int i = 0; i < populationSize; i++)
            {
                totalFitness += fitnessVal[i]; 
            }

            Console.Write("\n\nTotal Fitness Value : {0}", totalFitness);


            //Calculate Probability
            Console.Write("\n\nCalculate Probability of each Chromosome\n");
            double[] probability = new double[populationSize];
            double[] probabilityPercentage = new double[populationSize];

            for (int i = 0; i < populationSize; i++)
            {
                probability[i] = fitnessVal[i] / totalFitness;
                probabilityPercentage[i] = 100 * probability[i];

                Console.Write("\n---Chromosome {0} has {1} % chance of using", i+1, probabilityPercentage[i]);
            }

            Console.Write("\n\nChromosome {0} has the highest probability", bestFitnessIndex+1);


            double secondBestFitness;
            secondBestFitness = fitnessVal.OrderByDescending(z => z).Skip(1).First();
            int secondBestFitnessIndex;


           secondBestFitnessIndex = fitnessVal.ToList().IndexOf(secondBestFitness);


            bool[,] parents = new bool[2, noOfitems];

            Console.Write("\nSelected Chromosomes / Parents\n" );


            for(int j = 0; j < noOfitems; j++)
            {
                  parents[0, j] = population[bestFitnessIndex, j];
                  parents[1, j] = population[secondBestFitnessIndex, j];  
            }


            Console.WriteLine("\n\n\t--------------Generation : 2-----------------\n\n");

            Console.Write("\nChromosome {0} : ", bestFitnessIndex + 1);
            for (int i = 0; i < noOfitems; i++)
            {
                Console.Write("\t" + Convert.ToInt32(parents[0, i]));
            }

            Console.Write("\nChromosome {0} : ", secondBestFitnessIndex + 1);
            for (int i = 0; i < noOfitems; i++)
            {
                Console.Write("\t" + Convert.ToInt32(parents[1, i]));
            }

            //Step 4:  Crossover point

            int crosspointindex1 = rand.Next(parents.GetLength(0)); //Get Random Index from 1st Parent Chromosome 
            int crosspointindex2 = rand.Next(parents.GetLength(1)); //Get Random Index from 2nd Parent Chromosome 

            bool crosspoint1 = parents[0, crosspointindex1];
            bool crosspoint2 = parents[1, crosspointindex2];

            //int crossoverindex = crosspointindex1;
            //crosspointindex1 = crosspointindex2;
            //crosspointindex2 = crossoverindex;

            bool crossover = crosspoint1;
            crosspoint1 = crosspoint2;
            crosspoint2 = crossover;

            
            bool[,] childs = new bool[2, noOfitems];

            for(int i=0; i<2;i++)
            { 
                for(int j=0; j<noOfitems; j++)
                {
                    childs[i, j] = parents[i, j];
                }
            }

            childs[0, crosspointindex1] = crosspoint1;
            childs[1, crosspointindex2] = crosspoint2;

            //Display Generation 3

            Console.WriteLine("\n\n\t--------------Generation : 3-----------------\n\n");

            for (int i = 0; i < 2; i++)
            {
                Console.Write("Parent {0} : ", i+1);

                for(int j=0; j < noOfitems; j++)
                {
                    Console.Write("\t" + Convert.ToInt32(parents[i, j]));
                }

                Console.WriteLine();
            }

            for (int i = 0; i < 2; i++)
            {
                Console.Write("Child {0} : ", i+1);

                for (int j = 0; j < noOfitems; j++)
                {
                    Console.Write("\t" + Convert.ToInt32(childs[i, j]));
                }

                Console.WriteLine();
            }
            
           
            //Store parents and childs/offsprings to new population

            bool[,] newPopulation = new bool[parents.Length + childs.Length, noOfitems];

            int k;
            for(k = 0; k < 2; k++)
            {
                for(int j = 0; j < noOfitems; j++)
                {
                    newPopulation[k, j] = parents[k, j];
                }
            }

            int c = 0;
            for(; k <= populationSize; k++)
            {
                for(int j = 0; j < noOfitems; j++)
                {
                    newPopulation[k, j] = childs[c, j];
                }
                c++;
            }

            //Step 5: Mutation

            bool mutate;
            //Find chromosome and its one index value randomly
            int mutateIndexRow = rand.Next(0, populationSize-1);
            int mutateIndexCol = rand.Next(0, noOfitems-1);

            mutate = newPopulation[mutateIndexRow, mutateIndexCol];
            
            //Flip the  bit
            
            if(!mutate)
            {
                mutate = true;
            }
            else if(mutate)
            {
                mutate = false;
            }

            newPopulation[mutateIndexRow,mutateIndexCol] = mutate;
            Console.Write("\n\n----------After Mutation----------\n\n");
            Console.Write("Chromosome {0} : ", mutateIndexRow+1);

            for (int i = 0; i < noOfitems; i++)
            {
                Console.Write("\t" + Convert.ToInt32(newPopulation[mutateIndexRow, i]));
            }

          //  newPopulation[mutateIndex] 
           
        }   
    }
}
